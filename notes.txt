behind nat? server/client
rsa: public and private keys (long), signing data, struct representing connection?
    in real network public keys are given to libp2p
multiaddress protocols?
    /ipv4/1.2.3.4/tcp/3333/p2p/<peer_id> => /dslab/<peer_id>

memory for kademlia rooting table: 256 * 20 * 32 * N = 2^14 * 10 * N
    => 16GB ([address, peer_id] => 4+32 bytes)

global time for message latency? check

Benchmark results on Ryzen 7 4800hs (`cargo bench`):

rng_chacha_u64 => 3.83 mcs
rsa_generate_keys_2048 => 175 ms
rsa_generate_keys_1024 => 20 ms
rsa_generate_keys_512 => 3.0 ms
rsa_generate_keys_256 => 760 mcs
rsa_generate_keys_128 => 234 mcs
rsa_generate_keys_64 => 180 mcs

use multihash_codetable::Code::<$name> ?
    fork or insert? Sha2_512_256 is absent?

todo: rewrite crate multihash_codetable and file hashing.rs to macros:

use multihash_derive::MultihashDigest;

#[derive(Clone, Debug, Eq, PartialEq, Copy, MultihashDigest)]
#[mh(alloc_size = 32)]
pub enum Code {
    #[mh(code = 0x00, hasher = multihash_codetable::Strobe256)]
    Identity = 0x00,
    #[mh(code = 0x11, hasher = multihash_codetable::Strobe256)]
    Sha1 = 0x11,

    #[mh(code = 0x1013, hasher = multihash_codetable::Strobe256)]
    Sha2_224 = 0x1013,
    #[mh(code = 0x12, hasher = multihash_codetable::Strobe256)]
    Sha2_256 = 0x12,
    #[mh(code = 0x1012, hasher = multihash_codetable::Strobe256)]
    Sha2_256Trunc254Padded = 0x1012,
    #[mh(code = 0x20, hasher = multihash_codetable::Strobe256)]
    Sha2_384 = 0x20,
    #[mh(code = 0x13, hasher = multihash_codetable::Strobe256)]
    Sha2_512 = 0x13,
    #[mh(code = 0x1014, hasher = multihash_codetable::Strobe256)]
    Sha2_512_224 = 0x1014,
    #[mh(code = 0x1015, hasher = multihash_codetable::Strobe256)]
    Sha2_512_256 = 0x1015,

    #[mh(code = 0x17, hasher = multihash_codetable::Strobe256)]
    Sha3_224 = 0x17,
    #[mh(code = 0x16, hasher = multihash_codetable::Strobe256)]
    Sha3_256 = 0x16,
    #[mh(code = 0x15, hasher = multihash_codetable::Strobe256)]
    Sha3_384 = 0x15,
    #[mh(code = 0x14, hasher = multihash_codetable::Strobe256)]
    Sha3_512 = 0x14,

    #[mh(code = 0xb220, hasher = multihash_codetable::Strobe256)]
    Blake2b256 = 0xb220,
    #[mh(code = 0xb401, hasher = multihash_codetable::Strobe256)]
    PoseidonBls12_381A2Fc1 = 0xb401,
}

fn f(code: Code) -> Multihash {
    code.digest(&[1])
}