# u64 seed for the random number generator
seed = 42
# usize, replication parameter
k = 20
# usize, max number of concurrent requests of a peer
alpha = 3
# u32, max number of peers in the network
num_peers = 100_000
# distribution of the delays between peers
# valid values are 'constant', 'uniform', 'positive_normal'
# if 'constant', the 'delay_mean' key should be provided
# if 'uniform' => 'delay_min' and 'delay_max'
# if 'positive_normal' => 'delay_mean' and 'delay_std_dev'
# all of the must be non-negative
delay_distribution = 'uniform'
delay_min = 0.010
delay_max = 0.100
# network topology of the peers
# valid values are 'full', 'ring', 'star'
# 'full' requires 'first_id' and 'last_id' keys
# 'star' requires 'center_id' key
topology = 'full'

# timeouts
record_publication_interval = 79200.0 # 22 hours
record_expiration_interval = 172800.0 # 48 hours
# To keep the routing tables accurate and up to date,
# IPFS refreshes the routing table every 10 minutes.
kbuckets_refresh_interval = 600.0
query_timeout = 60.0

# Configuration for Kademlia "write-back" caching after successful lookups via 'get_record'
# Up to `max_peers` closest peers not returning the record will receive it.
caching_max_peers = 1
# enable bootstrap and records expiration
enable_bootstrap = false
# enable republishing of records
enable_republishing = false
